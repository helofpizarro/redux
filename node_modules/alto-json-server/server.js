const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const axios = require("axios").default;
const uuidv4 = require('uuid/v4');
const {readJson, writeJson} = require("./fileops");
const cloneDeep = require('lodash.clonedeep');

let server;
let app;
let db;
let externalDbPath;


const apiController = (modelName) => {
    const router = express.Router();


    // Object.defineProperty(db, modelName, {value: []});
    if (!db.hasOwnProperty(modelName)) {
        db[modelName] = [];
    }
    router.get("/", (req, res, next) => {
        res.json(db[modelName]);
    });

    router.get("/:id", (req, res, next) => {
        const items = db[modelName].filter(o => o.id == req.params.id);

        res.json(items.length > 0 ? items[0] : undefined);
    });

    router.post("/", (req, res, next) => {
        const newItem = {id: uuidv4(), ...req.body}
        db[modelName].push(newItem);
        writeJson(externalDbPath, db);
        res.json(newItem);
    });

    router.put("/:id", (req, res, next) => {
        db[modelName] = db[modelName].map(o => o.id == req.params.id ? {id: o.id, ...req.body} : o);
        writeJson(externalDbPath, db);
        res.json(req.body);
    });

    router.delete("/:id", (req, res, next) => {
        db[modelName] = db[modelName].filter(o => o.id != req.params.id);
        writeJson(externalDbPath, db);
        res.json({});
    });


    return router;
};

const registerRouteToApp = (endpoints) => {
    endpoints.forEach(e => {
        app.use(`/${e}`, apiController(e));
    })
};

const registerMiddleWare = mw => {
    app.use(mw);
};


function startServer(port = 3000, mwRegisterCb) {
    app = express();
    app.use(cors());
    app.use(bodyParser.json());
    if (mwRegisterCb) {
        mwRegisterCb(app);
    }
    // app.use("/", apiController("users"));
    return server = app.listen(port);
}

function connectDbFromExternal(dbPath) {
    externalDbPath = dbPath;
    db = readJson(dbPath);
    registerRouteToApp(Object.keys(db));
}

function connectDbFromObject(dbObject, dbPath = "db.json") {
    externalDbPath = dbPath;
    writeJson(dbPath, dbObject);
    db = dbObject;
    registerRouteToApp(Object.keys(db));
}

function getDbCopy() {
    return cloneDeep(db);
}

module.exports = {
    startServer,
    connectDbFromExternal,
    connectDbFromObject,
    getDbCopy,
    registerRouteToApp,
    registerMiddleWare
};

const assert = require("assert");
const axios = require("axios").default;
const uuidv4 = require('uuid/v4');
const {readJson, writeJson} = require("../fileops");
const {stripUUID, stripListUUID} = require("./util");
const {registerRouteToApp, getDbCopy, connectDbFromObject, connectDbFromExternal, startServer} = require("../server");


describe('crud operations', function () {

    const URL = "http://localhost:3000";

    let server;
    let db;


    beforeEach(async () => {
        db = {};
        server = startServer(3000);
        connectDbFromObject(db);

    });

    afterEach(async () => {
        server.close();
    });


    it('should crud', async function () {
        registerRouteToApp(["users"]);

        let res = await axios.post(URL + "/users", {
            username: "hayri",
            password: "1234"
        });

        // console.log(stripListUUID(db.users));
        assert.deepStrictEqual(stripListUUID(db.users), [{username: 'hayri', password: '1234'}])

        res = await axios.post(URL + "/users", {
            username: "necmi",
            password: "1234"
        });

        // console.log(stripListUUID(db.users));
        assert.deepStrictEqual(stripListUUID(db.users), [
                {username: 'hayri', password: '1234'},
                {username: 'necmi', password: '1234'}
            ]
        );


        //
        const data = await axios.get(URL + `/users/${res.data.id}`);
        // console.log(stripListUUID(data.data));
        assert.deepStrictEqual(stripListUUID(data.data), [{username: 'necmi', password: '1234'}])


        await axios.put(URL + `/users/${res.data.id}`, {
            username: "ferdi",
            password: "1234"
        });

        // console.log(stripListUUID(db.users));
        assert.deepStrictEqual(stripListUUID(db.users), [
            {username: 'hayri', password: '1234'},
            {username: 'ferdi', password: '1234'}
        ]);

        await axios.delete(URL + `/users/${res.data.id}`);
        // console.log(stripListUUID(db.users));
        assert.deepStrictEqual(stripListUUID(db.users), [{username: 'hayri', password: '1234'}])

        // console.log(db);

    });

    it('should register db', async function () {
        const ep = ["users", "roles", "admins"];
        // registerRouteToApp(app, ep);
        registerRouteToApp(ep);
        // console.log(db);

        assert.deepStrictEqual(db, {users: [], roles: [], admins: []});
    });

    it('should work external db', async function () {
        const dbpath = "./tests/db.sample.json";
        writeJson(dbpath, {
            users: [
                {id: uuidv4(), name: "ahmet"},
                {id: uuidv4(), name: "mehmet"}
            ],
            roles: [
                {id: uuidv4(), name: "admin"},
                {id: uuidv4(), name: "normal"}
            ]
        });

        const db = readJson(dbpath);
        // console.log(db);

        connectDbFromObject(db);
        const endpoints = Object.keys(db);
        // registerRouteToApp(app, endpoints);
        registerRouteToApp(endpoints);

        let res = await axios.get(URL + "/users");
        // console.log(stripListUUID(res.data));
        assert.deepStrictEqual(stripListUUID(res.data), [{name: 'ahmet'}, {name: 'mehmet'}])

        res = await axios.get(URL + "/roles");
        // console.log(stripListUUID(res.data));
        assert.deepStrictEqual(stripListUUID(res.data), [{name: 'admin'}, {name: 'normal'}]);


    });
});
